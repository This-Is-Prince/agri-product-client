// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: list_product.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ListProductServiceClient is the client API for ListProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ListProductServiceClient interface {
	ListProduct(ctx context.Context, in *ListProductReq, opts ...grpc.CallOption) (ListProductService_ListProductClient, error)
}

type listProductServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewListProductServiceClient(cc grpc.ClientConnInterface) ListProductServiceClient {
	return &listProductServiceClient{cc}
}

func (c *listProductServiceClient) ListProduct(ctx context.Context, in *ListProductReq, opts ...grpc.CallOption) (ListProductService_ListProductClient, error) {
	stream, err := c.cc.NewStream(ctx, &ListProductService_ServiceDesc.Streams[0], "/pb.ListProductService/ListProduct", opts...)
	if err != nil {
		return nil, err
	}
	x := &listProductServiceListProductClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ListProductService_ListProductClient interface {
	Recv() (*ListProductRes, error)
	grpc.ClientStream
}

type listProductServiceListProductClient struct {
	grpc.ClientStream
}

func (x *listProductServiceListProductClient) Recv() (*ListProductRes, error) {
	m := new(ListProductRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ListProductServiceServer is the server API for ListProductService service.
// All implementations must embed UnimplementedListProductServiceServer
// for forward compatibility
type ListProductServiceServer interface {
	ListProduct(*ListProductReq, ListProductService_ListProductServer) error
	mustEmbedUnimplementedListProductServiceServer()
}

// UnimplementedListProductServiceServer must be embedded to have forward compatible implementations.
type UnimplementedListProductServiceServer struct {
}

func (UnimplementedListProductServiceServer) ListProduct(*ListProductReq, ListProductService_ListProductServer) error {
	return status.Errorf(codes.Unimplemented, "method ListProduct not implemented")
}
func (UnimplementedListProductServiceServer) mustEmbedUnimplementedListProductServiceServer() {}

// UnsafeListProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ListProductServiceServer will
// result in compilation errors.
type UnsafeListProductServiceServer interface {
	mustEmbedUnimplementedListProductServiceServer()
}

func RegisterListProductServiceServer(s grpc.ServiceRegistrar, srv ListProductServiceServer) {
	s.RegisterService(&ListProductService_ServiceDesc, srv)
}

func _ListProductService_ListProduct_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListProductReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ListProductServiceServer).ListProduct(m, &listProductServiceListProductServer{stream})
}

type ListProductService_ListProductServer interface {
	Send(*ListProductRes) error
	grpc.ServerStream
}

type listProductServiceListProductServer struct {
	grpc.ServerStream
}

func (x *listProductServiceListProductServer) Send(m *ListProductRes) error {
	return x.ServerStream.SendMsg(m)
}

// ListProductService_ServiceDesc is the grpc.ServiceDesc for ListProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ListProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ListProductService",
	HandlerType: (*ListProductServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListProduct",
			Handler:       _ListProductService_ListProduct_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "list_product.proto",
}
